===================================================
0
===================================================
0
===================================================
0
===================================================
1000
===================================================
1000
===================================================
0
===================================================
0
===================================================
count(*)    
10     

Query plan:
temp(group by)
    subplan: sscan
                 class: tab_b node[?]
                 cost:  ? card ?
    sort:  ? asc
    cost:  ? card ?
Query stmt:
(select tab_b.col_a, count(*) from tab_b tab_b group by tab_b.col_a having (count(*)>=?))
Query plan:
sscan
    class: aa node[?]
    cost:  ? card ?
Query stmt:
(select aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a having (count(*)>=?)) aa (col_a, cnt))
Query plan:
sscan
    class: bb node[?]
    cost:  ? card ?
Query stmt:
(select bb.col_a, bb.cnt from (select aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a having (count(*)>=?)) aa (col_a, cnt)) bb (col_a, cnt))
Query plan:
sscan
    class: cc node[?]
    cost:  ? card ?
Query stmt:
(select cc.col_a, cc.cnt from (select bb.col_a, bb.cnt from (select aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a having (count(*)>=?)) aa (col_a, cnt)) bb (col_a, cnt)) cc (col_a, cnt))
Query plan:
nl-join (cross join)
    outer: sscan
               class: d node[?]
               sargs: term[?]
               cost:  ? card ?
    inner: iscan
               class: a node[?]
               index: idx term[?] (covers)
               cost:  ? card ?
    cost:  ? card ?
Query stmt:
select /*+ NO_PUSH_PRED */ count(*) from tab_a a, (select cc.col_a, cc.cnt from (select bb.col_a, bb.cnt from (select aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a having (count(*)>=?)) aa (col_a, cnt)) bb (col_a, cnt)) cc (col_a, cnt)) d (col_a, cnt) where a.col_a= ?:?  and d.col_a= ?:?  and a.col_a=d.col_a
===================================================
count(*)    
10     

Query plan:
temp(group by)
    subplan: sscan
                 class: tab_b node[?]
                 cost:  ? card ?
    sort:  ? asc
    cost:  ? card ?
Query stmt:
(select tab_b.col_a, count(*) from tab_b tab_b group by tab_b.col_a)
Query plan:
sscan
    class: aa node[?]
    sargs: term[?] AND term[?]
    cost:  ? card ?
Query stmt:
(select /*+ NO_PUSH_PRED */ aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a) aa (col_a, cnt) where (aa.cnt>= ?:? ) and aa.col_a= ?:? )
Query plan:
sscan
    class: bb node[?]
    cost:  ? card ?
Query stmt:
(select bb.col_a, bb.cnt from (select /*+ NO_PUSH_PRED */ aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a) aa (col_a, cnt) where (aa.cnt>= ?:? ) and aa.col_a= ?:? ) bb (col_a, cnt))
Query plan:
sscan
    class: cc node[?]
    cost:  ? card ?
Query stmt:
(select cc.col_a, cc.cnt from (select bb.col_a, bb.cnt from (select /*+ NO_PUSH_PRED */ aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a) aa (col_a, cnt) where (aa.cnt>= ?:? ) and aa.col_a= ?:? ) bb (col_a, cnt)) cc (col_a, cnt))
Query plan:
nl-join (cross join)
    outer: sscan
               class: d node[?]
               cost:  ? card ?
    inner: iscan
               class: a node[?]
               index: idx term[?] (covers)
               cost:  ? card ?
    cost:  ? card ?
Query stmt:
select count(*) from tab_a a, (select cc.col_a, cc.cnt from (select bb.col_a, bb.cnt from (select /*+ NO_PUSH_PRED */ aa.col_a, aa.cnt from (select tab_b.col_a, count(*) as [cnt] from tab_b tab_b group by tab_b.col_a) aa (col_a, cnt) where (aa.cnt>= ?:? ) and aa.col_a= ?:? ) bb (col_a, cnt)) cc (col_a, cnt)) d (col_a, cnt) where a.col_a= ?:?  and a.col_a=d.col_a
===================================================
0
===================================================
0
===================================================
0
