===================================================
0
===================================================
0
===================================================
8
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
909
===================================================
855
===================================================
890
===================================================
816
===================================================
435
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
1
===================================================
11
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
1
===================================================
1
===================================================
1
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
id    treeid    
1     null     
2     null     
8     null     

Query plan:
temp(order by)
    subplan: sscan
                 class: t? node[?]
                 sargs: term[?]
                 cost:  ? card ?
    sort:  ? asc, ? asc
    cost:  ? card ?
Query stmt:
select t?.id, t?.treeid from t? t? where t?.treeid is null  order by ?, ?
===================================================
treeid    
1     
1     
2     
2     
6     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_treeid 
    sargs: term[?]
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select t?.treeid from t? t? where (t?.id>t?.treeid) order by ?
/* ---> skip ORDER BY */
===================================================
treeid    
2     
2     
6     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_treeid (covers)
    filtr: term[?]
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select t?.treeid from t? t? where t?.treeid-?>? order by ?
/* ---> skip ORDER BY */
===================================================
Error:-493
===================================================
id    treeid    age    text    
2     null     null     A     
3     1     0     BAA     
4     1     0     AB     
5     2     0     CBA     
6     2     0     DBB     
7     6     0     CBBA     

Query plan:
temp(order by)
    subplan: sscan
                 class: t? node[?]
                 sargs: term[?]
                 cost:  ? card ?
    sort:  ? asc, ? asc
    cost:  ? card ?
Query stmt:
select t?.id, t?.treeid, t?.age, t?.[text] from t? t? where ((t?.id>t?.treeid) or (t?.[text]< ?:? )) order by ?, ?
===================================================
parentid    
49     
49     
49     
49     
49     
105     
105     
105     
105     
105     
154     
154     
154     
154     
154     
168     
168     
168     
168     
168     
217     
217     
217     
217     
217     
224     
224     
224     
224     
224     
273     
273     
273     
273     
273     
280     
280     
280     
280     
280     
336     
336     
336     
336     
336     
343     
343     
343     
343     
343     
392     
392     
392     
392     
392     
448     
448     
448     
448     
448     
511     
511     
511     
511     
511     
560     
560     
560     
560     
560     
567     
567     
567     
567     
567     
616     
616     
616     
616     
616     
623     
623     
623     
623     
623     
630     
630     
630     
630     
630     
679     
679     
679     
679     
679     
686     
686     
686     
686     
686     
735     
735     
735     
735     
735     
805     
805     
805     
805     
805     
812     
812     
812     
812     
812     
861     
861     
861     
861     
861     
917     
917     
917     
917     
917     
980     
980     
980     
980     
980     
1029     
1029     
1029     
1029     
1029     
1036     
1036     
1036     
1036     
1036     
1085     
1085     
1085     
1085     
1085     
1092     
1092     
1092     
1092     
1092     
1099     
1099     
1099     
1099     
1099     
1148     
1148     
1148     
1148     
1148     
1155     
1155     
1155     
1155     
1155     
1204     
1204     
1204     
1204     
1204     
1267     
1267     
1267     
1267     
1267     
1323     
1323     
1323     
1323     
1323     
1372     
1372     
1372     
1372     
1372     
1379     
1379     
1379     
1379     
1379     
1435     
1435     
1435     
1435     
1435     
1442     
1442     
1442     
1442     
1442     
1491     
1491     
1491     
1491     
1491     
1498     
1498     
1498     
1498     
1498     
1547     
1547     
1547     
1547     
1547     
1561     
1561     
1561     
1561     
1561     
1568     
1568     
1568     
1568     
1568     
1617     
1617     
1617     
1617     
1617     
1624     
1624     
1624     
1624     
1624     
1673     
1673     
1673     
1673     
1673     
1736     
1736     
1736     
1736     
1736     
1792     
1792     
1792     
1792     
1792     
1841     
1841     
1841     
1841     
1841     
1848     
1848     
1848     
1848     
1848     
1904     
1904     
1904     
1904     
1904     
1911     
1911     
1911     
1911     
1911     
1960     
1960     
1960     
1960     
1960     
1967     
1967     
1967     
1967     
1967     
2016     
2016     
2016     
2016     
2016     
2030     
2030     
2030     
2030     
2030     
2079     
2079     
2079     
2079     
2079     
2135     
2135     
2135     
2135     
2135     
2184     
2184     
2184     
2184     
2184     
2198     
2198     
2198     
2198     
2198     
2247     
2247     
2247     
2247     
2247     
2254     
2254     
2254     
2254     
2254     
2303     
2303     
2303     
2303     
2303     
2310     
2310     
2310     
2310     
2310     
2373     
2373     
2373     
2373     
2373     
2380     
2380     
2380     
2380     
2380     
2429     
2429     
2429     
2429     
2429     
2436     
2436     
2436     
2436     
2436     
2485     
2485     
2485     
2485     
2485     
2499     
2499     
2499     
2499     
2499     
2548     
2548     
2548     
2548     
2548     
2604     
2604     
2604     
2604     
2604     
2653     
2653     
2653     
2653     
2653     
2667     
2667     
2667     
2667     
2667     
2716     
2716     
2716     
2716     
2716     
2723     
2723     
2723     
2723     
2723     
2772     
2772     
2772     
2772     
2772     
2779     
2779     
2779     
2779     
2779     
2835     
2835     
2835     
2835     
2835     
2842     
2842     
2842     
2842     
2842     
2891     
2891     
2891     
2891     
2891     
2947     
2947     
2947     
2947     
2947     
3010     
3010     
3010     
3010     
3010     
3059     
3059     
3059     
3059     
3059     
3066     
3066     
3066     
3066     
3066     
3115     
3115     
3115     
3115     
3115     
3122     
3122     
3122     
3122     
3122     
3136     
3136     
3136     
3136     
3136     
3185     
3185     
3185     
3185     
3185     
3192     
3192     
3192     
3192     
3192     
3241     
3241     
3241     
3241     
3241     
3248     
3248     
3248     
3248     
3248     
3304     
3304     
3304     
3304     
3304     
3311     
3311     
3311     
3311     
3311     
3360     
3360     
3360     
3360     
3360     
3416     
3416     
3416     
3416     
3416     
3479     
3479     
3479     
3479     
3479     
3528     
3528     
3528     
3528     
3528     
3535     
3535     
3535     
3535     
3535     
3584     
3584     
3584     
3584     
3584     
3591     
3591     
3591     
3591     
3591     
3598     
3598     
3598     
3598     
3598     
3647     
3647     
3647     
3647     
3647     
3654     
3654     
3654     
3654     
3654     
3703     
3703     
3703     
3703     
3703     
3766     
3766     
3766     
3766     
3766     
3822     
3822     
3822     
3822     
3822     
3871     
3871     
3871     
3871     
3871     
3878     
3878     
3878     
3878     
3878     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_parentid (covers)
    filtr: term[?]
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select t?.parentid from t? t? where t?.parentid mod ?=? order by ?
/* ---> skip ORDER BY */
===================================================
id    parentid    text    
3901     3902     EEEEE     
3902     3903     EEEE     
3903     3904     EEE     
3904     3905     EE     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_id_parentid_text term[?] (covers)
    filtr: term[?]
    sort:  ? asc, ? asc, ? asc
    cost:  ? card ?
Query stmt:
select t?.id, t?.parentid, t?.[text] from t? t? where (t?.id> ?:? ) and (t?.parentid> ?:? ) order by ?, ?
/* ---> skip ORDER BY */
===================================================
0
===================================================
parentid    
1310     
1310     
1310     
1310     
1310     
1179     
1179     
1179     
1179     
1179     
1048     
1048     
1048     
1048     
1048     
917     
917     
917     
917     
917     
655     
655     
655     
655     
655     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_parentid (covers) (desc_index)
    filtr: term[?]
    sort:  ? desc
    cost:  ? card ?
Query stmt:
select t?.parentid from t? t? where t?.parentid mod ?=? order by ? desc 
/* ---> skip ORDER BY */
===================================================
id    parentid    text    
1803     1804     CBCDE     
1809     1810     CBCEE     
1841     1842     CBDE     
1847     1848     CBEAE     
1853     1854     CBEBE     
1859     1860     CBECE     
1865     1866     CBEDE     
1871     1872     CBEEE     
1873     1874     CBE     
1879     1880     CCAAE     
1885     1886     CCABE     
1891     1892     CCACE     
1897     1898     CCADE     
1903     1904     CCAEE     
1935     1936     CCBE     
1941     1942     CCCAE     
1947     1948     CCCBE     
1953     1954     CCCCE     
1959     1960     CCCDE     
1965     1966     CCCEE     
1997     1998     CCDE     
2003     2004     CCEAE     
2009     2010     CCEBE     
2015     2016     CCECE     
2021     2022     CCEDE     
2027     2028     CCEEE     
2029     2030     CCE     
2035     2036     CDAAE     
2041     2042     CDABE     
2047     2048     CDACE     
2053     2054     CDADE     
2059     2060     CDAEE     
2091     2092     CDBE     
2097     2098     CDCAE     
2103     2104     CDCBE     
2109     2110     CDCCE     
2115     2116     CDCDE     
2121     2122     CDCEE     
2153     2154     CDDE     
2159     2160     CDEAE     
2165     2166     CDEBE     
2171     2172     CDECE     
2177     2178     CDEDE     
2183     2184     CDEEE     
2185     2186     CDE     
2191     2192     CEAAE     
2197     2198     CEABE     
2203     2204     CEACE     
2209     2210     CEADE     
2215     2216     CEAEE     
2247     2248     CEBE     
2253     2254     CECAE     
2259     2260     CECBE     
2265     2266     CECCE     
2271     2272     CECDE     
2277     2278     CECEE     
2309     2310     CEDE     
2315     2316     CEEAE     
2321     2322     CEEBE     
2327     2328     CEECE     
2333     2334     CEEDE     
2339     2340     CEEEE     
2341     2342     CEE     
2373     2374     DAAE     
2379     2380     DABAE     
2385     2386     DABBE     
2391     2392     DABCE     
2397     2398     DABDE     
2403     2404     DABEE     
2435     2436     DACE     
2441     2442     DADAE     
2447     2448     DADBE     
2453     2454     DADCE     
2459     2460     DADDE     
2465     2466     DADEE     
2497     2498     DAEE     
2529     2530     DBAE     
2535     2536     DBBAE     
2541     2542     DBBBE     
2547     2548     DBBCE     
2553     2554     DBBDE     
2559     2560     DBBEE     
2591     2592     DBCE     
2597     2598     DBDAE     
2603     2604     DBDBE     
2609     2610     DBDCE     
2615     2616     DBDDE     
2621     2622     DBDEE     
2653     2654     DBEE     
2685     2686     DCAE     
2691     2692     DCBAE     
2697     2698     DCBBE     
2703     2704     DCBCE     
2709     2710     DCBDE     
2715     2716     DCBEE     
2747     2748     DCCE     
2753     2754     DCDAE     
2759     2760     DCDBE     
2765     2766     DCDCE     
2771     2772     DCDDE     
2777     2778     DCDEE     
2809     2810     DCEE     
2841     2842     DDAE     
2847     2848     DDBAE     
2853     2854     DDBBE     
2859     2860     DDBCE     
2865     2866     DDBDE     
2871     2872     DDBEE     
2903     2904     DDCE     
2909     2910     DDDAE     
2915     2916     DDDBE     
2921     2922     DDDCE     
2927     2928     DDDDE     
2933     2934     DDDEE     
2965     2966     DDEE     
2997     2998     DEAE     
3003     3004     DEBAE     
3009     3010     DEBBE     
3015     3016     DEBCE     
3021     3022     DEBDE     
3027     3028     DEBEE     
3059     3060     DECE     
3065     3066     DEDAE     
3071     3072     DEDBE     
3077     3078     DEDCE     
3083     3084     DEDDE     
3089     3090     DEDEE     
3121     3122     DEEE     
3123     3124     DE     
3129     3130     EAAAE     
3135     3136     EAABE     
3141     3142     EAACE     
3147     3148     EAADE     
3153     3154     EAAEE     
3185     3186     EABE     
3191     3192     EACAE     
3197     3198     EACBE     
3203     3204     EACCE     
3209     3210     EACDE     
3215     3216     EACEE     
3247     3248     EADE     
3253     3254     EAEAE     
3259     3260     EAEBE     
3265     3266     EAECE     
3271     3272     EAEDE     
3277     3278     EAEEE     
3279     3280     EAE     
3285     3286     EBAAE     
3291     3292     EBABE     
3297     3298     EBACE     
3303     3304     EBADE     
3309     3310     EBAEE     
3341     3342     EBBE     
3347     3348     EBCAE     
3353     3354     EBCBE     
3359     3360     EBCCE     
3365     3366     EBCDE     
3371     3372     EBCEE     
3403     3404     EBDE     
3409     3410     EBEAE     
3415     3416     EBEBE     
3421     3422     EBECE     
3427     3428     EBEDE     
3433     3434     EBEEE     
3435     3436     EBE     
3441     3442     ECAAE     
3447     3448     ECABE     
3453     3454     ECACE     
3459     3460     ECADE     
3465     3466     ECAEE     
3497     3498     ECBE     
3503     3504     ECCAE     
3509     3510     ECCBE     
3515     3516     ECCCE     
3521     3522     ECCDE     
3527     3528     ECCEE     
3559     3560     ECDE     
3565     3566     ECEAE     
3571     3572     ECEBE     
3577     3578     ECECE     
3583     3584     ECEDE     
3589     3590     ECEEE     
3591     3592     ECE     
3597     3598     EDAAE     
3603     3604     EDABE     
3609     3610     EDACE     
3615     3616     EDADE     
3621     3622     EDAEE     
3653     3654     EDBE     
3659     3660     EDCAE     
3665     3666     EDCBE     
3671     3672     EDCCE     
3677     3678     EDCDE     
3683     3684     EDCEE     
3715     3716     EDDE     
3721     3722     EDEAE     
3727     3728     EDEBE     
3733     3734     EDECE     
3739     3740     EDEDE     
3745     3746     EDEEE     
3747     3748     EDE     
3753     3754     EEAAE     
3759     3760     EEABE     
3765     3766     EEACE     
3771     3772     EEADE     
3777     3778     EEAEE     
3809     3810     EEBE     
3815     3816     EECAE     
3821     3822     EECBE     
3827     3828     EECCE     
3833     3834     EECDE     
3839     3840     EECEE     
3871     3872     EEDE     
3877     3878     EEEAE     
3883     3884     EEEBE     
3889     3890     EEECE     
3895     3896     EEEDE     
3901     3902     EEEEE     
3903     3904     EEE     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_id_parentid_text term[?] (covers)
    filtr: term[?] AND term[?]
    sort:  ? asc, ? asc, ? asc
    cost:  ? card ?
Query stmt:
select t?.id, t?.parentid, t?.[text] from t? t? where t?.parentid mod ?=? and (t?.id> ?:? ) and t?.[text] like  ?:?  order by ?, ?, ?
/* ---> skip ORDER BY */
===================================================
id    parentid    text    
3722     3747     EDEA     
3728     3747     EDEB     
3734     3747     EDEC     
3740     3747     EDED     
3746     3747     EDEE     

Query plan:
iscan
    class: t? node[?]
    index: ri_t?_parentid_id term[?] (desc_index)
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select t?.id, t?.parentid, t?.[text] from t? t? where t?.parentid= ?:?  order by ?
/* ---> skip ORDER BY */
===================================================
id    parentid    text    
3746     3747     EDEE     
3740     3747     EDED     
3734     3747     EDEC     
3728     3747     EDEB     
3722     3747     EDEA     

Query plan:
iscan
    class: t? node[?]
    index: ri_t?_parentid_id term[?]
    sort:  ? desc
    cost:  ? card ?
Query stmt:
select t?.id, t?.parentid, t?.[text] from t? t? where t?.parentid= ?:?  order by ? desc 
/* ---> skip ORDER BY */
===================================================
id    parentid    text    
3499     3504     ECCAA     
3500     3504     ECCAB     
3501     3504     ECCAC     
3502     3504     ECCAD     
3503     3504     ECCAE     
3505     3510     ECCBA     
3506     3510     ECCBB     
3507     3510     ECCBC     
3508     3510     ECCBD     
3509     3510     ECCBE     
3511     3516     ECCCA     
3512     3516     ECCCB     
3513     3516     ECCCC     
3514     3516     ECCCD     
3515     3516     ECCCE     
3517     3522     ECCDA     
3518     3522     ECCDB     
3519     3522     ECCDC     
3520     3522     ECCDD     
3521     3522     ECCDE     
3523     3528     ECCEA     
3524     3528     ECCEB     
3525     3528     ECCEC     
3526     3528     ECCED     
3527     3528     ECCEE     
3566     3591     ECEA     
3572     3591     ECEB     
3578     3591     ECEC     
3584     3591     ECED     
3590     3591     ECEE     
3629     3654     EDBA     
3635     3654     EDBB     
3641     3654     EDBC     
3647     3654     EDBD     
3653     3654     EDBE     
3655     3660     EDCAA     
3656     3660     EDCAB     
3657     3660     EDCAC     
3658     3660     EDCAD     
3659     3660     EDCAE     
3661     3666     EDCBA     
3662     3666     EDCBB     
3663     3666     EDCBC     
3664     3666     EDCBD     
3665     3666     EDCBE     
3667     3672     EDCCA     
3668     3672     EDCCB     
3669     3672     EDCCC     
3670     3672     EDCCD     
3671     3672     EDCCE     
3673     3678     EDCDA     
3674     3678     EDCDB     
3675     3678     EDCDC     
3676     3678     EDCDD     
3677     3678     EDCDE     
3679     3684     EDCEA     
3680     3684     EDCEB     
3681     3684     EDCEC     
3682     3684     EDCED     
3683     3684     EDCEE     
3722     3747     EDEA     
3728     3747     EDEB     
3734     3747     EDEC     
3740     3747     EDED     
3746     3747     EDEE     
3785     3810     EEBA     
3791     3810     EEBB     
3797     3810     EEBC     
3803     3810     EEBD     
3809     3810     EEBE     
3811     3816     EECAA     
3812     3816     EECAB     
3813     3816     EECAC     
3814     3816     EECAD     
3815     3816     EECAE     
3817     3822     EECBA     
3818     3822     EECBB     
3819     3822     EECBC     
3820     3822     EECBD     
3821     3822     EECBE     
3823     3828     EECCA     
3824     3828     EECCB     
3825     3828     EECCC     
3826     3828     EECCD     
3827     3828     EECCE     
3829     3834     EECDA     
3830     3834     EECDB     
3831     3834     EECDC     
3832     3834     EECDD     
3833     3834     EECDE     
3835     3840     EECEA     
3836     3840     EECEB     
3837     3840     EECEC     
3838     3840     EECED     
3839     3840     EECEE     
3878     3903     EEEA     
3884     3903     EEEB     
3890     3903     EEEC     
3896     3903     EEED     
3902     3903     EEEE     

Query plan:
iscan
    class: t? node[?]
    index: i_t?_parentid_text term[?]
    filtr: term[?]
    sort:  ? asc, ? asc
    cost:  ? card ?
Query stmt:
select t?.id, t?.parentid, t?.[text] from t? t? where t?.parentid mod ?=? and (t?.parentid> ?:? ) order by ?, ?
/* ---> skip ORDER BY */
===================================================
col_timestamp    col_datetime    
2009-05-03 18:59:12.0     2010-05-03 18:59:12.203     
2010-05-03 18:59:12.0     2010-05-03 18:59:12.203     
2020-05-03 18:59:12.0     2010-05-03 18:59:12.203     

Query plan:
iscan
    class: test_table node[?]
    index: i_test_table_col_timestamp_col_datetime term[?]
    sort:  ? asc, ? asc
    cost:  ? card ?
Query stmt:
(select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where (test_table.col_timestamp> ?:? ) order by ?)
/* ---> skip ORDER BY */
Query plan:
sscan
    class: t node[?]
    cost:  ? card ?
Query stmt:
select t.col_timestamp, t.col_datetime from (select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where (test_table.col_timestamp> ?:? ) order by ?) t (col_smallint, col_integer, col_bigint, col_float, col_double, col_monetary, col_numeric_?_?, col_char_?, col_varchar_?, col_string, col_nchar_?, col_varnchar_?, col_date, col_time, col_timestamp, col_datetime, col_bit, col_varbit, col_set, col_set_int, col_seq, col_multiset)
===================================================
col_timestamp    col_datetime    
2008-05-03 18:59:12.0     2010-05-03 18:59:12.203     

Query plan:
iscan
    class: test_table node[?]
    index: i_test_table_col_timestamp_col_datetime term[?]
    sort:  ? asc
    cost:  ? card ?
Query stmt:
(select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where test_table.col_timestamp= ?:?  order by ?)
/* ---> skip ORDER BY */
Query plan:
sscan
    class: t node[?]
    cost:  ? card ?
Query stmt:
select t.col_timestamp, t.col_datetime from (select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where test_table.col_timestamp= ?:?  order by ?) t (col_smallint, col_integer, col_bigint, col_float, col_double, col_monetary, col_numeric_?_?, col_char_?, col_varchar_?, col_string, col_nchar_?, col_varnchar_?, col_date, col_time, col_timestamp, col_datetime, col_bit, col_varbit, col_set, col_set_int, col_seq, col_multiset)
===================================================
col_timestamp    
2006-05-03 18:59:12.0     
2007-05-03 18:59:12.0     
2008-05-03 18:59:12.0     
2009-05-03 18:59:12.0     
2010-05-03 18:59:12.0     
2020-05-03 18:59:12.0     

Query plan:
iscan
    class: test_table node[?]
    index: i_test_table_col_timestamp_col_datetime (covers)
    filtr: term[?]
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select test_table.col_timestamp from test_table test_table where  cast( date_format(test_table.col_timestamp, '%Y') as integer)>? order by ?
/* ---> skip ORDER BY */
===================================================
col_smallint    col_float    col_string    
1     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     5.0     abcdefghijklmn     

Query plan:
iscan
    class: test_table node[?]
    index: i_test_table_col_smallint_col_float_col_string 
    filtr: term[?]
    sort:  ? asc, ? asc, ? asc
    cost:  ? card ?
Query stmt:
(select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where test_table.col_string like  ?:?  order by ?, ?, ?)
/* ---> skip ORDER BY */
Query plan:
sscan
    class: t node[?]
    cost:  ? card ?
Query stmt:
select t.col_smallint, t.col_float, t.col_string from (select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where test_table.col_string like  ?:?  order by ?, ?, ?) t (col_smallint, col_integer, col_bigint, col_float, col_double, col_monetary, col_numeric_?_?, col_char_?, col_varchar_?, col_string, col_nchar_?, col_varnchar_?, col_date, col_time, col_timestamp, col_datetime, col_bit, col_varbit, col_set, col_set_int, col_seq, col_multiset)
===================================================
col_smallint    col_float    col_string    
1     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     1.234     abcdefghijklmn     
123     5.0     abcdefghijklmn     

Query plan:
iscan
    class: test_table node[?]
    index: i_test_table_col_smallint_col_float_col_string 
    sargs: term[?]
    sort:  ? asc, ? asc, ? asc
    cost:  ? card ?
Query stmt:
(select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where test_table.col_varchar_? like  ?:?  order by ?, ?)
/* ---> skip ORDER BY */
Query plan:
sscan
    class: t node[?]
    cost:  ? card ?
Query stmt:
select t.col_smallint, t.col_float, t.col_string from (select /*+ NO_MERGE */ test_table.col_smallint, test_table.col_integer, test_table.col_bigint, test_table.col_float, test_table.col_double, test_table.col_monetary, test_table.col_numeric_?_?, test_table.col_char_?, test_table.col_varchar_?, test_table.col_string, test_table.col_nchar_?, test_table.col_varnchar_?, test_table.col_date, test_table.col_time, test_table.col_timestamp, test_table.col_datetime, test_table.col_bit, test_table.col_varbit, test_table.col_set, test_table.col_set_int, test_table.col_seq, test_table.col_multiset from test_table test_table where test_table.col_varchar_? like  ?:?  order by ?, ?) t (col_smallint, col_integer, col_bigint, col_float, col_double, col_monetary, col_numeric_?_?, col_char_?, col_varchar_?, col_string, col_nchar_?, col_varnchar_?, col_date, col_time, col_timestamp, col_datetime, col_bit, col_varbit, col_set, col_set_int, col_seq, col_multiset)
===================================================
column_integer    
1     
22     
333     

Query plan:
iscan
    class: test_table? node[?]
    index: pk_test_table?_column_integer (covers)
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select test_table?.column_integer from test_table? test_table? order by ?
/* ---> skip ORDER BY */
===================================================
column_integer    
333     
22     
1     

Query plan:
iscan
    class: test_table? node[?]
    index: pk_test_table?_column_integer (covers) (desc_index)
    sort:  ? desc
    cost:  ? card ?
Query stmt:
select test_table?.column_integer from test_table? test_table? order by ? desc 
/* ---> skip ORDER BY */
===================================================
column_timestamp    
2002-03-02 17:55:31.0     
2004-05-04 17:55:31.0     

Query plan:
iscan
    class: test_table? node[?]
    index: i_test_table?_column_timestamp 
    sargs: term[?]
    sort:  ? asc
    cost:  ? card ?
Query stmt:
select test_table?.column_timestamp from test_table? test_table? where (test_table?.column_datetime< cast(test_table?.column_timestamp as datetime)) order by ?
/* ---> skip ORDER BY */
===================================================
column_integer    column_timestamp    
22     2004-05-04 17:55:31.0     
333     2000-05-04 17:55:31.0     

Query plan:
iscan
    class: test_table? node[?]
    index: i_test_table?_column_integer_column_timestamp term[?] (covers)
    sort:  ? asc, ? asc
    cost:  ? card ?
Query stmt:
select test_table?.column_integer, test_table?.column_timestamp from test_table? test_table? where (test_table?.column_integer>= ?:? ) order by ?, ?
/* ---> skip ORDER BY */
===================================================
column_varchar_92    column_bit    column_datetime    column_smallint    
-07:-15:-34.-13 PM     null     2002-05-04 17:55:31.0     222     
05:55:31 PM 02/03/2000     null     2004-05-04 17:55:31.0     3333     
07:00:34 PM     null     2000-02-03 17:55:31.0     11     

Query plan:
iscan
    class: test_table? node[?]
    index: i_test_table?_column_varchar_?_column_bit_column_datetime_column_smallint term[?]
    sargs: term[?]
    sort:  ? asc, ? asc, ? asc, ? asc
    cost:  ? card ?
Query stmt:
(select /*+ NO_MERGE */ test_table?.column_integer, test_table?.column_smallint, test_table?.column_numeric_?_?, test_table?.column_char_?, test_table?.column_varchar_?, test_table?.column_date, test_table?.column_bit, test_table?.column_time, test_table?.column_timestamp, test_table?.column_datetime from test_table? test_table? where (test_table?.column_smallint<=test_table?.column_integer*?) and (test_table?.column_varchar_?> ?:? ) order by ?, ?, ?, ?)
/* ---> skip ORDER BY */
Query plan:
sscan
    class: t node[?]
    cost:  ? card ?
Query stmt:
select t.column_varchar_?, t.column_bit, t.column_datetime, t.column_smallint from (select /*+ NO_MERGE */ test_table?.column_integer, test_table?.column_smallint, test_table?.column_numeric_?_?, test_table?.column_char_?, test_table?.column_varchar_?, test_table?.column_date, test_table?.column_bit, test_table?.column_time, test_table?.column_timestamp, test_table?.column_datetime from test_table? test_table? where (test_table?.column_smallint<=test_table?.column_integer*?) and (test_table?.column_varchar_?> ?:? ) order by ?, ?, ?, ?) t (column_integer, column_smallint, column_numeric_?_?, column_char_?, column_varchar_?, column_date, column_bit, column_time, column_timestamp, column_datetime)
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
