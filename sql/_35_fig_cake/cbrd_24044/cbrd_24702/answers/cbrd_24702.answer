===================================================
0
===================================================
0
===================================================
300000
===================================================
0
===================================================
0
===================================================
count(distinct col_a)    count(distinct col_b)    count(distinct col_c)    count(distinct col_d)    count(distinct col_e)    count(distinct col_f)    count(distinct col_g)    count(distinct col_h)    count(1)    
300000     15001     1     301     4     31     3001     30001     300000     

===================================================
trace    

Query Plan:
  TABLE SCAN (dba.t)

  rewritten query: select /*+ SAMPLING_SCAN */ count(distinct [dba.t].col_a), count(distinct [dba.t].col_b), count(distinct [dba.t].col_c), count(distinct [dba.t].col_d), count(distinct [dba.t].col_e), count(distinct [dba.t].col_f), count(distinct [dba.t].col_g), count(distinct [dba.t].col_h), count(*) from [dba.t] [dba.t]

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
     

===================================================
count(distinct col_a)    count(distinct col_b)    count(distinct col_c)    count(distinct col_d)    count(distinct col_e)    count(distinct col_f)    count(distinct col_g)    count(distinct col_h)    count(1)    
300000     15001     1     301     4     31     3001     30001     300000     

===================================================
trace    

Query Plan:
  TABLE SCAN (dba.t)

  rewritten query: select count(distinct [dba.t].col_a), count(distinct [dba.t].col_b), count(distinct [dba.t].col_c), count(distinct [dba.t].col_d), count(distinct [dba.t].col_e), count(distinct [dba.t].col_f), count(distinct [dba.t].col_g), count(distinct [dba.t].col_h), count(*) from [dba.t] [dba.t]

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (table: dba.t), (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
     

===================================================
0
===================================================
0
===================================================
300000
===================================================
0
===================================================
count(distinct col_a)    count(distinct col_b)    count(distinct col_c)    count(distinct col_d)    count(distinct col_e)    count(distinct col_f)    count(distinct col_g)    count(distinct col_h)    count(1)    
300000     15001     1     301     4     31     3001     30001     300000     

===================================================
trace    

Query Plan:
  TABLE SCAN (dba.t)

  rewritten query: select /*+ SAMPLING_SCAN */ count(distinct [dba.t].col_a), count(distinct [dba.t].col_b), count(distinct [dba.t].col_c), count(distinct [dba.t].col_d), count(distinct [dba.t].col_e), count(distinct [dba.t].col_f), count(distinct [dba.t].col_g), count(distinct [dba.t].col_h), count(*) from [dba.t] [dba.t]

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
     

===================================================
count(distinct col_a)    count(distinct col_b)    count(distinct col_c)    count(distinct col_d)    count(distinct col_e)    count(distinct col_f)    count(distinct col_g)    count(distinct col_h)    count(1)    
300000     15001     1     301     4     31     3001     30001     300000     

===================================================
trace    

Query Plan:
  TABLE SCAN (dba.t)

  rewritten query: select count(distinct [dba.t].col_a), count(distinct [dba.t].col_b), count(distinct [dba.t].col_c), count(distinct [dba.t].col_d), count(distinct [dba.t].col_e), count(distinct [dba.t].col_f), count(distinct [dba.t].col_g), count(distinct [dba.t].col_h), count(*) from [dba.t] [dba.t]

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (table: dba.t), (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
     

===================================================
0
===================================================
0
