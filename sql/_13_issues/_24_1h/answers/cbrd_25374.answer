===================================================
0
===================================================
0
===================================================
100000
===================================================
0
===================================================
0
===================================================
0
===================================================
cola    colb    
101     101     
102     102     
103     103     
104     104     
105     105     
106     106     
107     107     
108     108     
109     109     
110     110     

===================================================
trace    

Query Plan:
  SORT (order by)
    NESTED LOOPS (left outer join)
      NESTED LOOPS (left outer join)
        SORT (limit)
          TABLE SCAN (a)
        INDEX SCAN (b.idx) (key range: a.cola=b.cola, covered: true)
      INDEX SCAN (c.idx) (key range: a.cola=c.cola, covered: true)

  rewritten query: select a.cola, a.colb from [dba.tbl] a left outer join [dba.tbl] b on a.cola=b.cola left outer join [dba.tbl] c on a.cola=c.cola order by ?, ? for orderby_num()> ?:? *? and orderby_num()<= ?:? *?+ ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
        SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
    ORDERBY (time: ?, topnsort: true)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (table: dba.tbl), (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
cola    colb    
101     101     
102     102     
103     103     
104     104     
105     105     
106     106     
107     107     
108     108     
109     109     
110     110     

===================================================
trace    

Query Plan:
  SORT (order by)
    NESTED LOOPS (left outer join)
      NESTED LOOPS (left outer join)
        SORT (limit)
          TABLE SCAN (a)
        INDEX SCAN (b.idx) (key range: a.cola=b.cola, covered: true)
      INDEX SCAN (c.idx) (key range: a.cola=c.cola, covered: true)

  rewritten query: select a.cola, a.colb from [dba.tbl] a left outer join [dba.tbl] b on a.cola=b.cola left outer join [dba.tbl] c on a.cola=c.cola order by ?, ? for orderby_num()> ?:? * ?:?  and orderby_num()<= ?:? * ?:? + ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
        SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
    ORDERBY (time: ?, topnsort: true)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (table: dba.tbl), (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
cola    colb    
101     101     
102     102     
103     103     
104     104     
105     105     
106     106     
107     107     
108     108     
109     109     
110     110     

===================================================
trace    

Query Plan:
  SORT (order by)
    NESTED LOOPS (left outer join)
      NESTED LOOPS (left outer join)
        SORT (limit)
          TABLE SCAN (a)
        INDEX SCAN (b.idx) (key range: a.cola=b.cola, covered: true)
      INDEX SCAN (c.idx) (key range: a.cola=c.cola, covered: true)

  rewritten query: select a.cola, a.colb from [dba.tbl] a left outer join [dba.tbl] b on a.cola=b.cola left outer join [dba.tbl] c on a.cola=c.cola order by ?, ? for orderby_num()> ?:?  and orderby_num()<= ?:? + ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
        SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
    ORDERBY (time: ?, topnsort: true)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (table: dba.tbl), (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
cola    colb    
101     101     
102     102     
103     103     
104     104     
105     105     
106     106     
107     107     
108     108     
109     109     
110     110     

===================================================
trace    

Query Plan:
  SORT (order by)
    NESTED LOOPS (left outer join)
      NESTED LOOPS (left outer join)
        SORT (limit)
          TABLE SCAN (a)
        INDEX SCAN (b.idx) (key range: a.cola=b.cola, covered: true)
      INDEX SCAN (c.idx) (key range: a.cola=c.cola, covered: true)

  rewritten query: select a.cola, a.colb from [dba.tbl] a left outer join [dba.tbl] b on a.cola=b.cola left outer join [dba.tbl] c on a.cola=c.cola order by ?, ? for orderby_num()> ?:?  and orderby_num()<= ?:? +?* ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
        SCAN (index: dba.tbl.idx), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?, covered: true)
    ORDERBY (time: ?, topnsort: true)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (table: dba.tbl), (heap time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
1000
===================================================
2000
===================================================
0
===================================================
0
===================================================
i    j    k    i    j    k    
12     11     11     12     12     12     
13     12     12     13     13     13     

===================================================
trace    

Query Plan:
  NESTED LOOPS (inner join)
    SORT (limit)
      INDEX SCAN (dba.u.i_u_j) (key range: ([dba.u].j> ?:? ))
    INDEX SCAN (dba.t.pk_t_i) (key range: [dba.u].i=[dba.t].i)

  rewritten query: select [dba.u].i, [dba.u].j, [dba.u].k, [dba.t].i, [dba.t].j, [dba.t].k from [dba.u] [dba.u], [dba.t] [dba.t] where [dba.u].i=[dba.t].i and ([dba.u].j> ?:? ) order by ? for orderby_num()> ?:? *? and orderby_num()<= ?:? *?+ ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.t.pk_t_i), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?) (lookup time: ?, rows: ?)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (index: dba.u.i_u_j), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?) (lookup time: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
i    j    k    i    j    k    
12     11     11     12     12     12     
13     12     12     13     13     13     

===================================================
trace    

Query Plan:
  NESTED LOOPS (inner join)
    SORT (limit)
      INDEX SCAN (dba.u.i_u_j) (key range: ([dba.u].j> ?:? ))
    INDEX SCAN (dba.t.pk_t_i) (key range: [dba.u].i=[dba.t].i)

  rewritten query: select [dba.u].i, [dba.u].j, [dba.u].k, [dba.t].i, [dba.t].j, [dba.t].k from [dba.u] [dba.u], [dba.t] [dba.t] where [dba.u].i=[dba.t].i and ([dba.u].j> ?:? ) order by ? for orderby_num()> ?:? * ?:?  and orderby_num()<= ?:? * ?:? + ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.t.pk_t_i), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?) (lookup time: ?, rows: ?)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (index: dba.u.i_u_j), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?) (lookup time: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
i    j    k    i    j    k    
12     11     11     12     12     12     
13     12     12     13     13     13     

===================================================
trace    

Query Plan:
  NESTED LOOPS (inner join)
    SORT (limit)
      INDEX SCAN (dba.u.i_u_j) (key range: ([dba.u].j> ?:? ))
    INDEX SCAN (dba.t.pk_t_i) (key range: [dba.u].i=[dba.t].i)

  rewritten query: select [dba.u].i, [dba.u].j, [dba.u].k, [dba.t].i, [dba.t].j, [dba.t].k from [dba.u] [dba.u], [dba.t] [dba.t] where [dba.u].i=[dba.t].i and ([dba.u].j> ?:? ) order by ? for orderby_num()> ?:?  and orderby_num()<= ?:? + ?:? 

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (temp time: ?, fetch: ?, ioread: ?, readrows: ?, rows: ?)
      SCAN (index: dba.t.pk_t_i), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?) (lookup time: ?, rows: ?)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (index: dba.u.i_u_j), (btree time: ?, fetch: ?, ioread: ?, readkeys: ?, filteredkeys: ?, rows: ?) (lookup time: ?, rows: ?)
        ORDERBY (time: ?, topnsort: true)
     

===================================================
0
===================================================
i    j    k    i    j    k    

===================================================
trace    

Query Plan:
  NESTED LOOPS (inner join)
    SORT (limit)
      INDEX SCAN (dba.u.i_u_j) (key range: ([dba.u].j> ?:? ))
    INDEX SCAN (dba.t.pk_t_i) (key range: [dba.u].i=[dba.t].i)

  rewritten query: select [dba.u].i, [dba.u].j, [dba.u].k, [dba.t].i, [dba.t].j, [dba.t].k from [dba.u] [dba.u], [dba.t] [dba.t] where [dba.u].i=[dba.t].i and ([dba.u].j> ?:? ) order by ? for orderby_num()> ?:?  and orderby_num()<= ?:? + cast(? as bigint)*( ?:?  div  ?:? )

Trace Statistics:
  SELECT (time: ?, fetch: ?, ioread: ?)
    SCAN (noscan time: ?, fetch: ?, ioread: ?)
      SCAN (index: dba.t.pk_t_i), (noscan time: ?, fetch: ?, ioread: ?)
    SUBQUERY (uncorrelated)
      SELECT (time: ?, fetch: ?, ioread: ?)
        SCAN (index: dba.u.i_u_j), (noscan time: ?, fetch: ?, ioread: ?)
     

===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
0
