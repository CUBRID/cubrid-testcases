===================================================
0
===================================================
0
===================================================
0
===================================================
0
===================================================
1000
===================================================
1
===================================================
0
===================================================
0
===================================================
0
===================================================
count(*)    
0     

Query plan:
sscan
    class: t_? node[?]
    cost:  ? card ?
Query stmt:
(select tbl.a from table({?}) t_? (c_?))
Query plan:
nl-join (cselect join)
    edge:  table(?) -> t_? node[?]
    outer: sscan
               class: t_? node[?]
               cost:  ? card ?
    inner: sscan
               class: t_? node[?]
               cost:  ? card ?
    cost:  ? card ?
Query stmt:
(select t_?.c_?, t_?.c_? from (select tbl.a from table({?}) t_? (c_?)) t_? (c_?), (fn_string(t_?.c_?)) t_? (c_?))
Query plan:
nl-join (inner join)
    edge:  table(?) -> t_? node[?]
    outer: sscan
               class: tbl node[?]
               cost:  ? card ?
    inner: sscan
               class: t_? node[?]
               sargs: table(?) -> t_? node[?] AND term[?]
               cost:  ? card ?
    subqs: ?
    cost:  ? card ?
Query stmt:
select count(*) from tbl tbl, (select t_?.c_?, t_?.c_? from (select tbl.a from table({?}) t_? (c_?)) t_? (c_?), (fn_string(t_?.c_?)) t_? (c_?)) t_? (c_?, c_?) where  cast(t_?.c_? as double)=?
===================================================
count(*)    
0     

Query plan:
sscan
    class: t_? node[?]
    cost:  ? card ?
Query stmt:
(select tbl.a from table({?}) t_? (c_?))
Query plan:
nl-join (cselect join)
    edge:  table(?) -> t_? node[?]
    outer: sscan
               class: t_? node[?]
               cost:  ? card ?
    inner: sscan
               class: t_? node[?]
               cost:  ? card ?
    cost:  ? card ?
Query stmt:
(select t_?.c_?, t_?.c_? from (select tbl.a from table({?}) t_? (c_?)) t_? (c_?), (fn_string(t_?.c_?)) t_? (c_?))
Query plan:
nl-join (inner join)
    edge:  table(?) -> t_? node[?]
    outer: sscan
               class: tbl node[?]
               cost:  ? card ?
    inner: sscan
               class: t_? node[?]
               sargs: table(?) -> t_? node[?] AND term[?]
               cost:  ? card ?
    subqs: ?
    cost:  ? card ?
Query stmt:
select count(*) from tbl tbl, (select t_?.c_?, t_?.c_? from (select tbl.a from table({?}) t_? (c_?)) t_? (c_?), (fn_string(t_?.c_?)) t_? (c_?)) t_? (c_?, c_?) where  cast(t_?.c_? as double) in multiset{?, ?}
===================================================
count(*)    
1001     

===================================================
count(*)    
1001     

===================================================
count(*)    
0     

===================================================
count(*)    
0     

===================================================
count(*)    
0     

Query plan:
sscan
    class: t_? node[?]
    cost:  ? card ?
Query stmt:
(select tbl.b from table({?}) t_? (c_?))
Query plan:
nl-join (cselect join)
    edge:  table(?) -> t_? node[?]
    outer: sscan
               class: t_? node[?]
               cost:  ? card ?
    inner: sscan
               class: t_? node[?]
               cost:  ? card ?
    cost:  ? card ?
Query stmt:
(select t_?.c_?, t_?.c_? from (select tbl.b from table({?}) t_? (c_?)) t_? (c_?), (fn_string(t_?.c_?)) t_? (c_?))
Query plan:
nl-join (inner join)
    edge:  table(?) -> t_? node[?]
    outer: sscan
               class: tbl node[?]
               cost:  ? card ?
    inner: sscan
               class: t_? node[?]
               sargs: table(?) -> t_? node[?] AND term[?]
               cost:  ? card ?
    subqs: ?
    cost:  ? card ?
Query stmt:
select count(*) from tbl tbl, (select t_?.c_?, t_?.c_? from (select tbl.b from table({?}) t_? (c_?)) t_? (c_?), (fn_string(t_?.c_?)) t_? (c_?)) t_? (c_?, c_?) where t_?.c_? like  cast(fn_int(?) as varchar)|| cast('%' as varchar)
===================================================
count(*)    
0     

===================================================
count(*)    
0     

===================================================
0
===================================================
count(*)    
0     

===================================================
0
===================================================
0
===================================================
count(*)    
0     

===================================================
0
===================================================
0
===================================================
count(*)    
1001     

===================================================
0
===================================================
0
===================================================
count(*)    
1001     

===================================================
0
===================================================
0
===================================================
count(*)    
0     

===================================================
0
===================================================
0
===================================================
count(*)    
0     

===================================================
0
===================================================
0
===================================================
0
===================================================
0
